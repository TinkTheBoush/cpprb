#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: C++ Replay Buffer
#+DATE: <2019-01-29 Tue>
#+AUTHOR: Hiroyuki Yamada
#+EMAIL: yamada@ymdMBP
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.14)

* Overview
Python module Replay Buffer written by C++

Complicated culculation (e.g. Segment Tree) are offloaded onto C++
which must be much faster than Python.

Internal C++ classes and corresponding Python wrapper classes share
memory by [[https://cython.readthedocs.io/en/latest/src/userguide/buffer.html][implementing buffer protocol on cython]] to avoid overhead of
copying large data.


* Requirements
- C++17 (at least GCC 7.2)
- Python 3
- Cython


* Installation
#+BEGIN_SRC shell
git clone https://gitlab.com/ymd_h/cpprb.git cpprb
cd cpprb
python setup.py build
python setup.py install
#+END_SRC

Depending on your environment, you might need to set =CC= and/or =CXX=
variables like ~CXX=g++ python setup.py build~.

You might need =sudo= for installation.

* Usage
A simple example is following;
#+BEGIN_SRC python
from cpprb import PyReplayBuffer

buffer_size = 256
obs_dim = 3
act_dim = 1
rb = PyReplayBuffer(buffer_size,obs_dim,act_dim)

obs = np.ones(shape=(obs_dim))
act = np.ones(shape=(act_dim))
rew = 0
next_obs = np.ones(shape=(obs_dim))
done = 0

for i in range(500):
    rb.add(obs,act,rew,next_obs,done)


batch_size = 32
sample = rb.sample(batch_size)
# sample is a dictionary whose keys are 'obs', 'act', 'rew', 'next_obs', and 'done'
#+END_SRC

* Classes
=PyReplayBuffer=, =PyPrioritizedReplayBuffer=, =PyNstepReplayBuffer=,
and =PyNstepPrioritizedReplayBuffer= are supported.

The other classes (including C++ classes) are considered as internal
classes, whose interfaces can change frequently.

** PyReplayBuffer
=PyReplayBuffer= is a basic replay buffer, where we pick up each time
point randomly. (Duplicated pick up is allowed.)

** PyPrioritizedReplayBuffer
=PyPrioritizedReplayBuffer= is a prioritized replay buffer, where you
can set importance (e.g. TD error) to each time point by calling
=PyPrioritizedReplayBuffer.update_priorities(self,ps)= or
=PyPrioritizedReplayBuffer.add(self,obs,act,rew,next_obs,done,p)=.
The constructor also take =alpha= parameter, whose default value is =0.6=.
For sampling, you need to pass =beata= argument as well as =batch_size=.

** PyNstepReplayBuffer
=PyNstepReplayBuffer= is a N-step reward version of replay buffer. Its
usage is same as =PyReplayBuffer=, except whose return value has
=discounts= key. The step size and discount rate are passed to its
constructor as =n_step= (default =4=) and =discount= (default 0.99),
respectively.

** PyNstepPrioritizedReplayBuffer
=PyNstepPrioritizedReplayBuffer= is a N-step reward version of replay
buffer.  The usage is a mixture of =PyPrioritizedReplayBuffer= and
=PyNstepReplayBuffer=.

* Test Environment
- GCC 8.2.0
- Python 3.7.2
- Cython 0.29.3
