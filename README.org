#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:nil toc:t todo:nil |:t
#+TITLE: cpprb
#+DATE: <2019-01-29 Tue>
#+AUTHOR: Hiroyuki Yamada
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.14)

#+HUGO_WITH_LOCALE:
#+HUGO_FRONT_MATTER_FORMAT: toml
#+HUGO_LEVEL_OFFSET: 1
#+HUGO_PRESERVE_FILLING:
#+HUGO_DELETE_TRAILING_WS:
#+HUGO_SECTION: .
#+HUGO_BUNDLE:
#+HUGO_BASE_DIR: ./site
#+HUGO_CODE_FENCE:
#+HUGO_USE_CODE_FOR_KBD:
#+HUGO_PREFER_HYPHEN_IN_TAGS:
#+HUGO_ALLOW_SPACES_IN_TAGS:
#+HUGO_AUTO_SET_LASTMOD:
#+HUGO_CUSTOM_FRONT_MATTER:
#+HUGO_BLACKFRIDAY:
#+HUGO_FRONT_MATTER_KEY_REPLACE:
#+HUGO_DATE_FORMAT: %Y-%m-%dT%T+09:00
#+HUGO_PAIRED_SHORTCODES:
#+HUGO_PANDOC_CITATIONS:
#+BIBLIOGRAPHY:
#+HUGO_ALIASES:
#+HUGO_AUDIO:
#+DESCRIPTION:
#+HUGO_DRAFT:
#+HUGO_EXPIRYDATE:
#+HUGO_HEADLESS:
#+HUGO_IMAGES:
#+HUGO_ISCJKLANGUAGE:
#+KEYWORDS:
#+HUGO_LAYOUT:
#+HUGO_LASTMOD:
#+HUGO_LINKTITLE:
#+HUGO_LOCALE:
#+HUGO_MARKUP:
#+HUGO_MENU:
#+HUGO_MENU_OVERRIDE:
#+HUGO_OUTPUTS:
#+HUGO_PUBLISHDATE:
#+HUGO_SERIES:
#+HUGO_SLUG:
#+HUGO_TAGS:
#+HUGO_CATEGORIES:
#+HUGO_RESOURCES:
#+HUGO_TYPE:
#+HUGO_URL:
#+HUGO_VIDEOS:
#+HUGO_WEIGHT: auto

#+STARTUP: showall logdone

[[https://img.shields.io/gitlab/pipeline/ymd_h/cpprb.svg]]
[[https://img.shields.io/pypi/v/cpprb.svg]]
[[https://img.shields.io/pypi/l/cpprb.svg]]
[[https://img.shields.io/pypi/status/cpprb.svg]]
[[https://ymd_h.gitlab.io/cpprb/coverage/][https://gitlab.com/ymd_h/cpprb/badges/master/coverage.svg]]

#+attr_html: :width 100px
[[./site/static/images/favicon.png]]

* DONE Overview
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

cpprb is a python ([[https://github.com/python/cpython/tree/master/Python][CPython]]) module providing replay buffer classes for
reinforcement learning.

Major target users are researchers and library developers.

You can build your own reinforcement learning algorithms together with
your favorite deep learning library (e.g. [[https://www.tensorflow.org/][TensorFlow]], [[https://pytorch.org/][PyTorch]]).

cpprb forcuses speed, flexibility, and memory efficiency.

By utilizing [[https://cython.org/][Cython]], complicated calculations (e.g. segment tree for
prioritized experience replay) are offloaded onto C++.
(The name cpprb comes from "C++ Replay Buffer".)

In terms of API, initially cpprb referred to [[https://github.com/openai/baselines][OpenAI baselines]]'s
implementation. In the current version, cpprb has much more
flexibility. Any [[https://numpy.org/][NumPy]] compatible types of any numbers of values can
be stored (as long as memory capacity is sufficient). For example, you
can store the next action and the next next observation, too.


* DONE Installation
:PROPERTIES:
:EXPORT_HUGO_SECTION: installation
:EXPORT_FILE_NAME: _index
:END:

cpprb requires following softwares before installation.

- C++17 compiler
  - [[https://gcc.gnu.org/][GCC]] (maybe 7.2 and newer)
  - [[https://visualstudio.microsoft.com/][Visual Studio]] (2017 Enterprise is fine)
- Python 3
- pip

Cuurently, [[https://clang.llvm.org/][clang]], which is a default Xcode C/C++ compiler at Apple macOS,
cannot compile cpprb.

If you are macOS user, you need to install GCC and set environment values
of =CC= and =CXX= to =g++=, or just use virtual environment (e.g. [[https://www.docker.com/][Docker]]).


** Install from [[https://pypi.org/][PyPI]] (Recommended)

The following command installs cpprb together with other dependancies.

#+BEGIN_SRC shell
pip install cpprb
#+END_SRC

Depending on your environment, you might need =sudo= or =--user= flag
for installation.

Currently, no binary packages are hosted on PyPI and you need to
compile by your self, however, I plan to distribute binary packages
for Windows, macOS, and Linux in future.

** Install from source code

First, download source code manually or clone the repository;

#+begin_src shell
git clone https://gitlab.com/ymd_h/cpprb.git
#+end_src

Then you can install same way;

#+begin_src shell
cd cpprb
pip install .
#+end_src


For this installation, you need to convert extended Python (.pyx) to
C++ (.cpp) during installation, it takes longer time than installation
from PyPI.


* DONE Usage
:PROPERTIES:
:EXPORT_HUGO_SECTION: features
:EXPORT_FILE_NAME: simple_usage
:END:

Here is a simple example for storing standard environment (aka. "obs",
"act", "rew", "next_obs", and "done").

#+BEGIN_SRC python
from cpprb import ReplayBuffer

buffer_size = 256
obs_shape = 3
act_dim = 1
rb = ReplayBuffer(buffer_size,
                  env_dict ={"obs": {"shape": obs_shape},
                             "act": {"shape": act_dim},
                             "rew": {},
                             "next_obs": {"shape": obs_shape},
                             "done": {}})

obs = np.ones(shape=(obs_shape))
act = np.ones(shape=(act_dim))
rew = 0
next_obs = np.ones(shape=(obs_shape))
done = 0

for i in range(500):
    rb.add(obs=obs,act=act,rew=rew,next_obs=next_obs,done=done)


batch_size = 32
sample = rb.sample(batch_size)
# sample is a dictionary whose keys are 'obs', 'act', 'rew', 'next_obs', and 'done'
#+END_SRC

Flexible environment values are defined by =env_dict= when buffer creation.

Since stored values have flexible name, you have to pass to
=ReplayBuffer.add= member by keyword.


* DONE Features
:PROPERTIES:
:EXPORT_HUGO_SECTION: features
:EXPORT_FILE_NAME: _index
:END:

cpprb provides buffer classes for building following algorithms.

| Algorithms                    | cpprb class                               | Paper             |
|-------------------------------+-------------------------------------------+-------------------|
| Experience Replay             | =ReplayBuffer=                            | [[https://link.springer.com/article/10.1007/BF00992699][L. J. Lin]]         |
| Prioritized Experience Replay | =PrioritizedReplayBuffer=                 | [[https://arxiv.org/abs/1511.05952][T. Schaul et. al.]] |
| Multi-step Learning           | =ReplayBuffer=, =PrioritizedReplayBuffer= |                   |


cpprb features and its usage are described at following pages:
- [[https://ymd_h.gitlab.io/cpprb/features/flexible_environment/][Flexible Environment]]
- [[https://ymd_h.gitlab.io/cpprb/features/multistep_add/][Multi-step add]]
- [[https://ymd_h.gitlab.io/cpprb/features/per/][Prioritized Experience Replay]]
- [[https://ymd_h.gitlab.io/cpprb/features/nstep/][Nstep Experience Replay]]
- [[https://ymd_h.gitlab.io/cpprb/features/memory_compression/][Memory Compression]]

* DONE Contributing to cpprb
:PROPERTIES:
:EXPORT_HUGO_SECTION: contributing
:EXPORT_FILE_NAME: _index
:END:

Any contribution are very welcome!

** Report Issue
When you have any problems or requests, you can check [[issues on GitLab.com]].
If you still cannot find any information, you can open your own issue.

** Merge Request (Pull Request)

cpprb uses following local rules:
- Branch Name
  - "HotFix_***" for bug fix
  - "Feature_***" for new feature implementation
- docstring
  - Must for external API
  - [[https://numpydoc.readthedocs.io/en/latest/format.html][Numpy Style]]
- Unit Test
  - Put test code under "test/" directory
  - Can test by =python -m unittest <Your Test Code>= command
  - Continuous Integration on GitLab CI configured by ~.gitlab-ci.yaml~
- Open an issue and associate it to Merge Request

Step by step instruction for beginners is described at [[https://ymd_h.gitlab.io/cpprb/contributing/merge_request][here]].

* DONE Links
:PROPERTIES:
:EXPORT_HUGO_SECTION: misc
:EXPORT_FILE_NAME: links
:END:

** cpprb sites
- [[https://ymd_h.gitlab.io/cpprb/][Project Site]]
  - [[https://ymd_h.gitlab.io/cpprb/api/][Class Reference]]
  - [[https://ymd_h.gitlab.io/cpprb/coverage/][Unit Test Coverage]]
- [[https://gitlab.com/ymd_h/cpprb][Main Repository]]
- [[https://github.com/yamada-github-account/cpprb][Github Mirror]]
- [[https://pypi.org/project/cpprb/][cpprb on PyPI]]

** cpprb users' repositories
- [[https://github.com/keiohta/tf2rl][keiohta/TF2RL]] :: TensorFlow2.0 Reinforcement Learning


* DONE Lisence
:PROPERTIES:
:EXPORT_HUGO_SECTION: misc
:EXPORT_FILE_NAME: lisence
:END:
cpprb is available under MIT lisence.
