variables: &global-variables
  CXX: "g++ -std=c++17 -O3 -march=native -Wall -Wextra -Icpprb -pthread"
  CC: "g++ -std=c++17 -O3 -march=native -Wall -Wextra -Icpprb -pthread"
  DOCKER_BUILDKIT: 1
  GIT_DEPTH: 10
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip"

stages:
  - build_image
  - build
  - bench_mark_test
  - page_build
  - page_deploy
  - binary_build
  - upload

.job_template: &setup
  image: &dev_image $CI_REGISTRY_IMAGE/build:latest
  before_script:
    - g++ --version
    - python3 --version
  except:
    - schedules

docker_build:
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/build:latest || true
    - docker build --pull=true --cache-from $CI_REGISTRY_IMAGE/build:latest -t $CI_REGISTRY_IMAGE/build:latest .
    - docker push $CI_REGISTRY_IMAGE/build:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true


cpprb_build:
  <<: *setup
  stage: build
  script:
    - DEBUG_CPPRB=1 python3 setup.py build_ext --inplace --force
    - DEBUG_CPPRB=1 python3 setup.py bdist_wheel
  artifacts:
    paths:
      - cpprb/*.html
      - cpprb/*.cpp
      - cpprb/*.so
      - dist/*.whl

emacs:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --batch README.org -l site/init.el --eval '(setq debug-on-error t)' --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - emacs --batch CHANGELOG.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - cd site
    - emacs --batch site.org -l init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
  artifacts:
    paths:
      - site/content
  except:
    - schedules

README_MD:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --batch README.org --eval '(org-md-export-to-markdown)'
  artifacts:
    paths:
      - README.md
  except:
    - schedules

hugo:
  image: registry.gitlab.com/pages/hugo:latest
  stage: page_build
  variables:
    <<: *global-variables
    GIT_SUBMODULE_STRATEGY: recursive
  environment: production
  script:
    - hugo version
    - cd site
    - hugo -c content -v
  artifacts:
    paths:
      - public
  needs:
    - emacs
  except:
    - schedules

sphinx:
  image: *dev_image
  stage: page_build
  environment: production
  script:
    - pip install $(echo dist/*.whl)['all']
    - sphinx-build -b html sphinx public/api
  artifacts:
    paths:
      - sphinx/*.rst
      - public
  needs:
    - cpprb_build
  except:
    - schedules

pages:
  image: alpine
  stage: page_deploy
  environment: production
  script:
    - mkdir -p public/annotation
    - mv cpprb/*.html public/annotation/
  artifacts:
    paths:
      - public
  only:
    - master
  except:
    - schedules

pypi:
  image: *dev_image
  stage: upload
  environment: production
  script:
    - rm -rf cpprb/*.cpp
    - python3 setup.py clean
    - python3 setup.py build_ext sdist
    - twine upload dist/cpprb-*.tar.gz
    - twine upload wheelhouse-fix/cpprb-*.whl
  only:
    - tags
  except:
    - branches
    - schedules
  needs:
    - manylinux
    - README_MD

repo:
  image: docker:latest
  stage: upload
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/build:latest
    - docker tag $CI_REGISTRY_IMAGE/build:latest $CI_REGISTRY_IMAGE/build:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/build:$CI_COMMIT_TAG
  only:
    - tags
  except:
    - branches
    - schedules

manylinux:
  image: quay.io/pypa/manylinux2010_x86_64
  stage: binary_build
  script:
    - for PIP in /opt/python/cp3{6..9}*/bin/pip; do ${PIP} wheel . -w wheelhouse/ --no-deps; done
    - for WHL in wheelhouse/cpprb-*.whl; do auditwheel repair ${WHL} -w wheelhouse-fix; done
  artifacts:
    paths:
      - "wheelhouse-fix/cpprb-*.whl"
  except:
    - schedules
  needs:
    - job: README_MD
      artifacts: true
  cache:
    paths:
      - "$CI_PROJECT_DIR/.pip"
    key: "${CI_PROJECT_PATH}-BINARY-BUILD"

manylinux2014:
  image: quay.io/pypa/manylinux2014_x86_64
  stage: binary_build
  script:
    - for PIP in /opt/python/cp310*/bin/pip; do ${PIP} wheel . -w wheelhouse/ --no-deps; done
    - for WHL in wheelhouse/cpprb-*.whl; do auditwheel repair ${WHL} -w wheelhouse-fix; done
  artifacts:
    paths:
      - "wheelhouse-fix/cpprb-*.whl"
  except:
    - schedules
  needs:
    - job: README_MD
      artifacts: true
  cache:
    paths:
      - "$CI_PROJECT_DIR/.pip"
    key: "${CI_PROJECT_PATH}-BINARY-BUILD"
