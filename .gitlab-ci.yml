variables:
  CXX: "g++ -std=c++17 -O3 -march=native -Wall -Wextra -Icpprb -pthread"
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - page_export
  - cpp_test
  - py_build
  - page_build
  - py_test
  - test_coverage
  - page_deploy
  - pypi_upload

.job_template: &setup
  image: &dev_image registry.gitlab.com/ymd_h/cpprb/build:latest
  before_script:
    - g++ --version
    - python3 --version

.test_template: &py_setup
  image: *dev_image
  stage: py_test
  before_script:
    - g++ --version
    - python3 --version
    - pip install $(echo dist/cpprb-*.whl)['all']
  artifacts:
    paths:
      - .coverage*

ReplayBuffer.cpp:
  <<: *setup
  stage: cpp_test
  script:
    - $CXX -o test/ReplayBuffer test/ReplayBuffer.cpp
    - test/ReplayBuffer

SegmentTree.cpp:
  <<: *setup
  stage: cpp_test
  script:
    - $CXX -o test/SegmentTree test/SegmentTree.cpp
    - test/SegmentTree

py_build:
  <<: *setup
  stage: py_build
  script:
    - CC=g++ python3 setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist

ReplayBuffer:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/PyReplayBuffer.py

issue:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/issue.py

multi_rew:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/multi_rew.py

gym:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/gym.py

high_level_api:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/HighLevelAPI.py

features:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/features.py

experimental:
  <<: *py_setup
  script:
    - python3 -m coverage run --rcfile=.coveragerc test/experimental.py

coverage:
  <<: *setup
  stage: test_coverage
  script:
    - python3 -m coverage combine
    - python3 -m coverage report
    - python3 -m coverage html -d public/coverage
  artifacts:
    paths:
      - public

emacs:
  image: iquiw/alpine-emacs
  stage: page_export
  script:
    - emacs --batch README.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - emacs --batch README.org --eval '(org-md-export-to-markdown)'
    - cd site
    - emacs --batch site.org -l init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
  artifacts:
    paths:
      - site/content
      - README.md
  only:
    - master

pages:
  image: registry.gitlab.com/pages/hugo:latest
  stage: page_deploy
  environment: production
  script:
    - hugo version
    - cd site
    - hugo -c content -v
  artifacts:
    paths:
      - public
  only:
    - master

sphinx:
  image: *dev_image
  stage: page_build
  environment: production
  script:
    - pip install $(echo dist/cpprb-*.whl)['all']
    - sphinx-apidoc -F -M -o sphinx cpprb
    - sphinx-build -b html sphinx public/api
  artifacts:
    paths:
      - public
  only:
    - master

pypi:
  image: *dev_image
  stage: pypi_upload
  environment: production
  script:
    - twine upload dist/*.tar.gz
  only:
    - tags
  except:
    - branches
